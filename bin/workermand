#!/usr/bin/env php
<?php
define('WORKERMAND_ROOT', dirname(dirname(__FILE__)));

$loader = require WORKERMAND_ROOT . '/vendor/autoload.php';
use Workerman\Worker;

define('WORKERMAND_VER', 'workermand/0.0.1 (workerman/' . Worker::VERSION . ')');

$opt_show_ver = false;
$opt_show_help = false;
$opt_signal = null;
$opt_daemon = false;
$conf_file = WORKERMAND_ROOT . '/etc/workermand.json';

$options = getopt("hvds:c:");
foreach ($options as $opt => $v) {

    switch ($opt) {
        case 'v':
            $opt_show_ver = true; continue;

        case 'h':
            $opt_show_ver = true;
            $opt_show_help = true;
            continue;

        case 'd':
            $opt_daemon = true;
            continue;

        case 's':
            $opt_signal = $v;
            continue;

        case 'c':
            $conf_file = $v;
            continue;
    }
}

if ($opt_show_ver) {
    write_stderr('workermand version: ' . WORKERMAND_VER . PHP_EOL);

    if ($opt_show_help) {
        write_stderr(
            "Usage: workermand [-hv] [-s signal] [-c filename]" . PHP_EOL . PHP_EOL.
            "Options:" .PHP_EOL.
            "  -h         : this help" .PHP_EOL.
            "  -v            : show version and exit" .PHP_EOL.
            "  -t            : test configuration and exit" .PHP_EOL.
            "  -d            : daemon" .PHP_EOL.
            "  -s signal     : send signal to a master process: ".
                               "stop, quit, reopen, reload" .PHP_EOL.
            "  -c filename   : set configuration file (default: )".PHP_EOL
        );
    }
    return 0;
}

if ($opt_signal) {
    switch ($opt_signal) {
        case 'stop':
        case 'reload':
        case 'restart':
        case 'status':
            exec_worker('workermand', $opt_signal);
            break;

        default:
            write_stderr('invalid signal:' . $opt_signal . PHP_EOL);
            return 1;
    }
    return 0;
}

if (!file_exists($conf_file)) {
    write_stderr('conf file not exists:' . $conf_file . PHP_EOL);
    return 1;
}
$conf = json_decode(file_get_contents($conf_file), true);
if ($conf === NULL) {
    write_stderr($conf_file . ' does not contain valid JSON' . PHP_EOL);
    return 1;
}

$loader->setPsr4('Workermand\\', WORKERMAND_ROOT . '/lib');

foreach ($conf['thrift'] as $app) {
    $worker = new \Workermand\Workers\ThriftWorker($app['listen'], null, $app);
    $worker->count = $app['worker_processes'];
    $worker->name = $app['ns'];
    $worker->user = $conf['user'];
}

if ($opt_daemon) {
    exec_worker('workermand', 'start', '-d');
} else {
    exec_worker('workermand', 'start');
}

function write_stderr($str)
{
    file_put_contents('php://stderr', $str);
}

function exec_worker()
{
    global $argv, $argc;

    $argv = func_get_args();
    $argc = count($argv);
    Worker::$logFile = '/tmp/workerman.log';
    Worker::runAll();
}
